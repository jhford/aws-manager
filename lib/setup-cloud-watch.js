const aws = require('aws-sdk');
const sqslib = require('sqs-simple');
const _log = require('./log');
const uuid = require('uuid');

/**
 * Create and link the CloudWatch Events rules and targets as well as the SQS
 * queues to send ec2 instance state change messages
 */
async function setupCloudWatchEvents({
  sqs, cwe,
  regions = ['us-east-1'],
  ruleName = 'ec2-instance-state-transitions',
  queueName = 'ec2-events',
}) {
  for (let region of regions) {
    let log = _log.child({region, ruleName, queueName});
    let _sqs = sqs[region];
    let _cwe = cwe[region];

    log.info({queueName}, 'about to create queue');
    let queueInfo = await sqslib.initQueue({
      queueName: queueName,
      delaySeconds: 15,
      sqs: _sqs,
    });
    log.info({queueName, queueInfo}, 'about to create queue');

    // Let's list the rules and determine if the rule already exists
    let hasRuleAlready = false;
    let rulesList;
    do {
      let request = {
        NamePrefix: ruleName,
      };
      if (rulesList && rulesList.NextToken) {
        request.NextToken = rulesList.NextToken;
      }
      rulesList = await _cwe.listRules(request).promise();
      for (let rule of rulesList.Rules) {
        if (rule.Name === ruleName) {
          log.info({ruleName}, 'Rule already exists with this name');
          hasRuleAlready = true;
          break;
        }
      }
    } while (rulesList.NextToken);
        
    // Create the rule if it doesn't already exist
    if (!hasRuleAlready) {
      let response = await _cwe.putRule({
        Name: ruleName,
        Description: 'This rule sends all EC2 instance state change notifications to an SQS queue',
        EventPattern: JSON.stringify({
          source: [
            'aws.ec2',
          ],
          'detail-type': [
            'EC2 Instance State-change Notification',
          ],
        }),
        State: 'ENABLED',
      }).promise();
      let ruleArn = response.RuleArn;
      log.info({ruleArn}, 'Rule created');

      let statementId = ruleName;

      // Need to create a Policy for the Queue.
      /* Example as generated by management console:
        {
          "Version": "2012-10-17",
          "Id": "arn:aws:sqs:us-west-2:692406183521:ec2-events-development/SQSDefaultPolicy",
          "Statement": [
            {
              "Sid": "AWSEvents_manually-created-version_Id8213208247261",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": "sqs:SendMessage",
              "Resource": "arn:aws:sqs:us-west-2:692406183521:ec2-events-development",
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": "arn:aws:events:us-west-2:692406183521:rule/manually-created-version"
                }
              }
            }
          ]
        }
      */

      let queuePolicy = {
        Version: '2012-10-17',
        Statement: [{
          Sid: uuid.v4(),
          Effect: 'Allow',
          Principal: {
            AWS: '*',
          },
          Action: 'sqs:SendMessage',
          Resource: queueInfo.queueArn,
          Condition: {
            ArnEquals: {
              'aws:SourceArn': ruleArn,
            },
          },
        }],
      };

      let policySetResult = await _sqs.setQueueAttributes({
        Attributes: {
          Policy: JSON.stringify(queuePolicy),
        },
        QueueUrl: queueInfo.queueUrl,
      }).promise();
      log.info({queueUrl: queueInfo.queueUrl, ruleArn}, 'Set Queue Policy');

    }

    let hasTargetAlready = false;
    let targetsList;
    do {
      let request = {
        Rule: ruleName,
      };
      if (targetsList && targetsList.NextToken) {
        request.NextToken = targetsList.NextToken;
      }
      targetsList = await _cwe.listTargetsByRule(request).promise();
      for (let target of targetsList.Targets) {
        if (target.Arn === queueInfo.queueArn) {
          log.info({targetArn: target.Arn}, 'Already have a target');
          hasTargetAlready = true;
          break;
        }
      }
    } while (targetsList.NextToken);

    if (!hasTargetAlready) {
      log.info({queueInfo}, 'Setting up target');
      let response = await _cwe.putTargets({
        Rule: ruleName,
        Targets: [{
          Arn: queueInfo.queueArn,
          Id: ruleName + '-target',
        }],
      }).promise();

      if (response.FailedEntryCount > 0) {
        throw new Error('Failed to set up target');
      }
    }
  } 
}

module.exports = {setupCloudWatchEvents};
